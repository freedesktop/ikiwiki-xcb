# XCB and Xlib/XCB

## Introduction

[Xlib](http://tronche.com/gui/x/xlib/introduction/) has been the standard C binding for the [X Window System](http://xorg.freedesktop.org) protocol for many years now. It is an excellent piece of work, but there are applications for which it is not ideal, for example

- Small platforms: Xlib is a large piece of code, and it is difficult to make it smaller.
- Latency hiding: Xlib requests requiring a reply are effectively synchronous: they block until the reply appears, whether the result is needed immediately or not.
- Direct access to the protocol: Xlib does quite a bit of caching, layering, and similar optimizations. While this is normally a feature, it makes it difficult to simply emit specified X protocol requests and process specific responses.
- Threaded applications: While Xlib does attempt to support multithreading, the API makes this difficult and error-prone.
- New extensions: The Xlib infrastructure provides limited support for the creation of X extension client side code.

### XCB: an X protocol C Binding

For these reasons, among others, we are working on XCB, an X protocol C Binding which is designed to solve the above problems and thus provide a base for

- Toolkit implementation.
- Direct protocol-level programming.
- Lightweight emulation of commonly used portions of the Xlib API (in progress, see below).

### XCL: an Xlib Compatibility Layer

We previously worked on XCL, an Xlib Compatibility Layer, which built on XCB to emulate Xlib. We expected in doing this to allow the large base of existing applications built on Xlib to begin to take advantage of XCB's capabilities.

XCL was a qualified success. The more arcane features of Xlib were difficult to capture in new code. We eventually chose a different approach for Xlib compatibility.

### Xlib/XCB: Xlib with XCB transport

Our experience with XCL convinced us that significant wins were available in providing a library at once binary-compatible with Xlib and built atop XCB. Our second, much more successful attempt at achieving this goal was to rip much of the insides out of stock Xlib and replace it with calls into XCB (and some XCL) code. The result is Xlib/XCB, a library that allows existing application binaries linked against Xlib to run unmodified, allows new applications to mix calls to XCB and Xlib (providing an incremental porting path), and achieves significant savings over stock Xlib in size and complexity.

## Availability

XCB and Xlib/XCB development efforts are coordinated using CVS and git, this Wiki, and the mailing list.

The CVS repository is hosted by freedesktop.org since October 2003, replacing the repository on [Keith Packard's server](http://home.keithp.com). See the [instructions for freedesktop.org CVS](http://www.freedesktop.org/wiki/GettingInvolved); our CVSROOT is in [/cvs/xcb](http://cvs.freedesktop.org/xcb/). The git repository was created to integrate the XCB work in the X11 library and at the same time do real testing of alternatives to CVS

To build XCB from source, you need to have installed at least:

- [pkgconfig](http://pkgconfig.freedesktop.org) 0.15.0
- automake 1.7
- autoconf 2.50
- libtool 1.5.6
- [check](http://check.sourceforge.net) (but see [[NoCheck]] if you don't want to install this)
- xsltproc
- gperf 3.0.1

(Trivial patches to support earlier versions, or a note that earlier versions "just work", would be welcome.)

There are multiple modules. The modules you need to checkout, build, and install for each part of the project are, in order:

- from [xorg](http://www.freedesktop.org/Software/xorg) CVS:
  - proto/X11
  - lib/Xau
- from git: git://anongit.freedesktop.org/git/xcb:
  - xcb-proto
  - xcb

To build Xlib with support for XCB, first build XCB as above. After that, the modules you need to checkout, build, and install for each part of the project are, in order:

- from [xorg](http://www.freedesktop.org/Software/xorg) CVS:
  - proto/XExt
  - proto/KB
  - proto/Input
  - lib/xtrans
- from git: git://anongit.freedesktop.org/git/xorg/lib/libX11 (when you configure libX11, give the '--with-xcb' flag)

This is a fairly complex operation at this point. Watch out for pkgconfig problems, esp. distinguishing `/usr/local`, `/usr`, and `/usr/X11R6` in the config. Note that proto/X11 and xcb-proto exist only to install header files, so typing `make` or `make all` will produce the message "Nothing to be done for 'all'". That's normal.

## Using Git

libX11 and xcb repositories are using [git](http://git.or.cz/) as SCM. Git is a powerful SCM started by Linus Torvalds as a tool to handle the Linux Kernel development. You can download it from <http://www.kernel.org/pub/software/scm/git/>. To learn how to use git, you can read the [short tutorial](http://www.kernel.org/pub/software/scm/git/docs/core-tutorial.html), the [full documentation](http://www.kernel.org/pub/software/scm/git/docs/) or Jeff's Garzik [Kernel-hacker howto](http://linux.yyz.us/git-howto.html) (which was written for kernel developers but it's useful for any project). Developers are recommended to read this documentation.

This is a quick guide for users (not developers). First of all, you need to [install git](http://www.kernel.org/pub/software/scm/git/) (it's already available in many distros like debian testing, gentoo, etc).

- How to get a copy of xcb/libX11:
  - \# git clone git://anongit.freedesktop.org/git/xcb (this will create a 'xcb' directory in the working directory)
  - \# git clone git://anongit.freedesktop.org/git/xorg/lib/libX11 (same for libX11)
  - git will create a '.git' directory inside the source directory where it stores all the info
- How to check for updates:
  - Go to the directory where you have your xcb/libX11 sources and type: "git pull". This will download and apply updates to your local repository.
- How to switch from 'head' to an available version:
  - \# git reset --hard [[NameOfTheTag]] (you can see all the available tags doing ls .git/refs/tags. Warning: Don't do this this way if you're a developer)
- How to switch back to 'head':
  - \# git checkout -f master
  - You can also switch your sources to any given commit in the past passing a commit-id to 'git reset --hard' (check the docs to learn what it's a 'commit-id')
- Bisection search:
  - This a brute-force but very useful method to find out what change causes a given bug, specially if you are not a developer and you know (neither you want to know) nothing about what is going on in the code. You tell git what was the last version that worked, the first version where you noticed the bug (of course you need to have a reproduceable bug in order to do this ), and git will set your repository to a state somewhere in the middle of those two 'points'. After testing it, you tell git if the bug is there or not, and git will set your repository to another state which is closer to the bug. After compiling and testing a few revisions, git will be able to tell you what commit causes the bug. For example, let's say I found a reproduceable bug in libX11 between the XORG-6\_8\_1 tag and XORG-6\_8\_99\_9 (cd libX11; ls .git/refs/tags).
  - Set your repository to the know-failing state: 'git reset --hard XORG-6\_8\_99\_9'
  - Tell git to start bisection search: 'git bisect start'
  - Tell git what was the know-failing version: 'git bisect good XORG-6\_8\_1'
  - Compile and test. Is the bug there? Type 'git bisect bad' Everything works well? Type 'git bisect good'. Git will tell you how many revisions you need to test.
  - If you can't test a given 'state' (ej: git bisectin put all your sources ina state somewhere in the middle of a merge and it doesn't compile) type 'git bisect good/bad' and Git will give you another 'state' to test.
  - More details and tricks at <http://www.kernel.org/pub/software/scm/git/docs/howto/isolate-bugs-with-bisect.txt>

### Mailing List

The [mailing list](http://www.freedesktop.org/mailman/listinfo/xcb) has been hosted by freedesktop.org since October 2003, taking over from [[BartMassey]], who hosted it from February 2003. Before that it was hosted by [[KeithPackard]], beginning in June 2002. Old mailing list addresses are being forwarded to the current list; and everyone who was subscribed to those earlier lists should still be subscribed to this one.

Jeremy has set up a new [xcb-commit](http://www.freedesktop.org/mailman/listinfo/xcb-commit) mailing list to notify users of cvs commits. We also have a [CIA project page](http://cia.navi.cx/stats/project/xcb) where people can find RSS feeds of xcb commits.

## Implementation and Status

Both XCB and our Xlib compatibility efforts are works in progress; we have an [[XCBDevelopmentPlan]] that is also a work in progress. Some brief notes:

### XCB

[[XCBToDo]] describes current work needed and in progress. Also available: [[XcbRationale]] and [[XcbApi]] documentation.

The protocol layer of XCB is implemented as a set of [XML](http://www.w3.org/XML) protocol descriptions, along with an [XSLT](http://www.w3.org/TR/xslt)-based C binding generator. The remainder of XCB consists of C code.

The structure of XCB is designed to be as simple as possible while making common usage convenient and reasonably efficient. XCB is designed to work transparently with POSIX Thread programs or single-threaded programs: on platforms where POSIX threads are unavailable, it will be compilable without.

The X core requests have been implemented in XCB, as well as the BIG-REQUESTS, XC-Misc, SHAPE, SHM, DPMS, Render, Randr, GLX, [XFIXES](http://www.freedesktop.org/Software/FixesExt), [Composite](http://www.freedesktop.org/Software/CompositeExt), [DAMAGE](http://www.freedesktop.org/Software/XDamage) and [XEvIE](http://www.freedesktop.org/Software/XEvIE) extensions. A multithreaded demonstration program uses XCB for animated graphics in multiple windows. Other demos for Render, event monitoring, access to connection setup data, and DPMS also exist.

[[JoshTriplett]] has documented the [XML-XCB protocol description format](http://cvs.freedesktop.org/xcb/xcb-proto/doc/xml-xcb.txt); this documentation is included in the xcb-proto package.

[[JameySharp]] has written some documentation for those who might want to understand the M4-based [[protocol description language|XCBProtocolLanguage]] previously used in XCB.

[[BartMassey]] has done some [work](#Publications) on establishing correctness properties of the core data dispatch mechanism of XCB using a model of XCB written in the [Z](http://www.afm.sbu.ac.uk/z/) formal specification notation. This is good, since the mechanism is complex, and the previous version was known to have defects.

[[JameySharp]] has begun early work on new [[XCB-based libraries and applications|usingxcb]], in addition to the Xlib work described below.

[[VincentTorri]] has begun a tutorial on XCB. It can be found in the source code repository's [tutorial subdirectory](http://cvs.freedesktop.org/xcb/xcb/doc/tutorial/) and [read on-line](http://cvs.freedesktop.org/*checkout*/xcb/xcb/doc/tutorial/index.html). There are also some simple [examples](http://www.iecn.u-nancy.fr/~torri/files/xcb/examples/) on how to use XCB, like drawing points and lines. Additional examples about how XCBImage works could be found in [/cvs/xcb-demo/tests](http://cvs.freedesktop.org/xcb/).

### Xlib/XCB

In September 2002, [[JameySharp]] [proposed](http://nexp.cs.pdx.edu/pipermail/xcb/2002-September/000031.html) a modification to Xlib that would maintain binary compatibility with Xlib extensions and applications. The day before Halloween 2003, [[JameySharp]] and [[KeithPackard]] hashed out a better-informed approach, which certainly maintains binary compatibility with applications, and might not require recompiles of extensions either. This was mostly implemented two days later. As of June 2004, the result is quite usable for real work, although some rare but annoying bugs remain.

Previous work on XCL is best considered a prototype. It was complete enough to run rxvt and some small utilities like xlsatoms without any changes, but more of Xlib needed to be emulated to support most applications. This new approach enables slowly migrating Xlib internals and applications to XCB, without losing any of Xlib's functionality at any point, with the exception of support for arbitrary thread packages (only pthreads is supported by XCB) and some transports and authentication methods that haven't been implemented for XCB yet. An important feature of this strategy is that fixes to XFree86's implementation may still be imported where applicable since we're not making gratuitous modifications now.

### XML-XCB

In 2004, [[JoshTriplett]] replaced the M4-based protocol description macros with an XML-based protocol description data format and an XSLT-based C binding generator, as part of the [[XmlXcb]] project. This work has been merged into XCB.

<a name="Publications" id="Publications"></a>

## Publications

[[BartMassey]] and [[JameySharp]].<br /> XCB: An X Protocol C Binding.<br /> In _Proc. [2001 XFree86 Technical Conference](http://www.usenix.org/events/xfree86/)_, Oakland, CA, November 2001. USENIX.<br /> URL [http://www.linuxshowcase.org/2001/full\_papers/massey/massey.pdf](http://www.linuxshowcase.org/2001/full_papers/massey/massey.pdf).<br /> Local copies: [PDF](http://www.freedesktop.org/software/xcb/xfree86-xcb.pdf), [PS](http://www.freedesktop.org/software/xcb/xfree86-xcb.ps).

[[BartMassey]] and Robert Bauer.<br /> X meets Z: Verifying correctness in the presence of POSIX Threads.<br /> In _Proc. [2002 Usenix Annual Technical Conference](http://www.usenix.org/events/usenix02/), Freenix Track_, Monterey, CA, June 2002.<br /> URL <http://www.usenix.org/events/usenix02/tech/freenix/massey.html>.<br /> Local copies: [PDF](http://www.freedesktop.org/software/xcb/usenix-zxcb.pdf), [PS](http://www.freedesktop.org/software/xcb/usenix-zxcb.ps).

[[JameySharp]] and [[BartMassey]].<br /> XCL: An Xlib Compatibility Layer for XCB.<br /> In _Proc. [2002 Usenix Annual Technical Conference](http://www.usenix.org/events/usenix02/), Freenix Track_, Monterey, CA, June 2002.<br /> URL <http://www.usenix.org/events/usenix02/tech/freenix/sharp.html>.<br /> Local copies: [PDF](http://www.freedesktop.org/software/xcb/usenix-xcl.pdf), [PS](http://www.freedesktop.org/software/xcb/usenix-xcl.ps).<br /> Slides: [PDF](http://www.freedesktop.org/software/xcb/xcl-talk.pdf), [PS](http://www.freedesktop.org/software/xcb/xcl-talk.ps).

[[JameySharp]].<br /> How Xlib is Implemented (And What We're Doing About It).<br /> In _Proc. [2004 Usenix Annual Technical Conference](http://www.usenix.org/events/usenix04/), Freenix Track_, Boston, MA, June 2004.<br /> URL <http://www.usenix.org/events/usenix04/tech/freenix/sharp.html>.<br /> Local copies: [PDF](http://www.freedesktop.org/software/xcb/xlib_impl.pdf), [PS](http://www.freedesktop.org/software/xcb/xlib_impl.ps).<br /> Slides: [PDF](http://www.freedesktop.org/software/xcb/xlib_impl_slides.pdf).

[[JameySharp]].<br /> XCB and Xlib.<br /> Presented at [Desktop Developer's Conference 2005](http://desktopcon.org/2005/).<br /> Slides: [PDF](http://xcb.freedesktop.org/pubs/ddc2005.pdf) [SXI](http://xcb.freedesktop.org/pubs/ddc2005.sxi).

## Acknowledgements

The authors are grateful to [[KeithPackard]] for his advice and assistance with X and XCB issues both philosophical and technical, and to Xlib author [[JimGettys]] for his advice and support. We are also grateful to [[AndyHowe]] for his efforts in testing XCB and finding ways to improve its implementation and documentation, and in implementing a significant portion of XCL.

In addition, we thank the [Usenix](http://www.usenix.org) Association for their financial and staff support of ALS and the XFree86 Technical Conference. A Student Stipend awarded by the Usenix Association made it possible for Jamey to attend the 2001 XFree86 Technical Conference.

Finally, we are grateful to [Portland State University](http://www.pdx.edu), the [College of Engineering and Computer Science](http://www.cecs.pdx.edu), and particularly the [Computer Science Department](http://www.cs.pdx.edu) for their support and forbearance during this work. Bart's travel expenses for the 2001 XFree86 Technical Conference and for Usenix 2002 were paid by the PSU CS Dept., making it possible for him to attend. The University is also currently providing the bandwidth and rack space to host [freedesktop.org](http://www.freedesktop.org), including this project. [HP](http://hp.com) has generously provided the machine hosting `freedesktop.org`.
