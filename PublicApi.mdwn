[[toc levels="6"]]

## Types

These types are declared in xcb.h.

<a name="XCBConnection"></a>

### XCBConnection

(xcb.h)

`typedef struct XCBConnection XCBConnection`

An XCBConnection is an opaque structure containing all data that [[XCB]] needs to communicate with an X server. The structure is defined in xcbint.h.

<a name="XCBExtension"></a>

### XCBExtension

(xcb.h)

`typedef struct XCBExtension XCBExtension`

An XCBExtension is an opaque structure used as key for [XCBGetExtensionData](#XCBGetExtensionData).

<a name="XCBAuthInfo"></a>

### XCBAuthInfo

(xcb.h)

    typedef struct XCBAuthInfo {
             int namelen;
             char *name;
             int datalen;
             char *data;
    } XCBAuthInfo;

A container for authorization information to be sent to the X server.

<dl>
  <dt>name</dt>
  <dd>string containing the authentication protocol name, such as &quot;MIT-MAGIC-COOKIE-1&quot; or &quot;XDM-AUTHORIZATION-1&quot;.</dd>
  <dt>data</dt>
  <dd>interpreted in a protocol-specific manner.</dd>
</dl>

----

These functions are declared in xcb.h.

<a name="XCBConnect"></a>

## XCBConnect

(xcb\_util.c)

`XCBConnection *XCBConnect(const char *display, int *screen)`

Connects to the X server specified by `display`. If `display` is null, uses the value of the DISPLAY environment variable. If a particular screen on that server is preferred, the int pointed to by `screen` (if non-null) will be set to that screen; otherwise the screen will be set to 0.

<a name="XCBConnectToDisplayWithAuthInfo"></a>

## XCBConnectToDisplayWithAuthInfo

(xcb\_util.c)

`XCBConnection *XCBConnectToDisplayWithAuthInfo(const char *display, XCBAuthInfo *auth, int *screen)`

Connects to the X server specified by `display`, using the given authorization information. If a particular screen on that server is preferred, the int pointed to by `screen` (if non-null) will be set to that screen; otherwise the screen will be set to 0.

<a name="XCBConnectToFD"></a>

## XCBConnectToFD

(xcb\_conn.c)

`XCBConnection *XCBConnectToFD(int fd, XCBAuthInfo *auth_info)`

Connects to an X server, given an open socket and a suitable [XCBAuthInfo](#XCBAuthInfo).

<dl>
  <dt>fd</dt>
  <dd>
    <p>a file descriptor bidirectionally connected to an X server. <a href="#XCBGetTCPFD">XCBGetTCPFD</a> and <a href="#XCBGetUnixFD">XCBGetUnixFD</a> return appropriate file descriptors.</p>
  </dd>
  <dt>auth_info</dt>
  <dd>
    <p>authentication data, or 0 if the connection should be unauthenticated. <a href="#XCBGetAuthInfo">XCBGetAuthInfo</a> returns appropriate authentication data.</p>
  </dd>
  <dt>Returns</dt>
  <dd>
    <p>an <a href="#XCBConnection">XCBConnection</a>, or 0 on failure.</p>
  </dd>
</dl>

See also [XCBConnect](#XCBConnect).

<a name="XCBDisconnect"></a>

## XCBDisconnect

(xcb\_conn.c)

`void XCBDisconnect(XCBConnection *c)`

Closes the file descriptor and frees all memory associated with the connection.

<dl>
  <dt>c</dt>
  <dd>
    <p>a connection previously returned by <a href="#XCBConnect">XCBConnect</a> and not previously passed to XCBDisconnect.</p>
  </dd>
</dl>

<a name="XCBParseDisplay"></a>

## XCBParseDisplay

(xcb\_util.c)

`int XCBParseDisplay(const char *name, char **host, int *display, int *screen)`

Parses a display string `name` in the form documented by X(7x). Has no side effects on failure.

<dl>
  <dt>name</dt>
  <dd>the display name to parse; if null or empty, uses the environment variable DISPLAY.</dd>
  <dt>host</dt>
  <dd>a non-null pointer to a pointer which will be set to a malloc&#39;d copy of the hostname.</dd>
  <dt>display</dt>
  <dd>a non-null pointer to an int which will be set to the display number.</dd>
  <dt>screen</dt>
  <dd>a (possibly null) pointer to an int which will be set to the preferred screen number, or set to 0 if the display string does not contain a screen number.</dd>
  <dt>Returns</dt>
  <dd>
    <p>0 on failure (perhaps <tt>name</tt> was null or unparsable, or malloc failed); non-zero on success.</p>
  </dd>
</dl>

<a name="XCBGetSetupData"></a>

## XCBGetSetup

(xcb\_conn.c)

`const XCBSetup *XCBGetSetup(XCBConnection *c)`

Accessor for the data returned by the server when the [XCBConnection](#XCBConnection) was initialized.

This data includes

- the server's required format for images,
- a list of available visuals,
- a list of available screens,
- the server's maximum request length (in the absence of the BIG-REQUESTS extension),
- and other assorted information.

See the X protocol specification and xcb\_types.h for more details.

<a name="XCBGetFileDescriptor"></a>

## XCBGetFileDescriptor

(xcb\_conn.c)

`int XCBGetFileDescriptor(XCBConnection *c)`

Accessor for the file descriptor that was passed to the [XCBConnectToFD](#XCBConnectToFD) call that returned `c`.

<a name="XCBGetMaximumRequestLength"></a>

## XCBGetMaximumRequestLength

(xcb\_out.c)

`CARD32 XCBGetMaximumRequestLength(XCBConnection *c)`

In the absence of the BIG-REQUESTS extension, returns the maximum_request_length field from the connection setup data, which may be as much as 65535. If the server supports BIG-REQUESTS, then the maximum_request_length field from the reply to the [[BigRequestsEnable]] request will be returned instead.

Note that this length is measured in four-byte units, making the theoretical maximum lengths roughly 256kB without BIG-REQUESTS and 16GB with.

<a name="XCBWaitForEvent"></a>

## XCBWaitForEvent

(xcb\_in.c [!] )

`XCBGenericEvent *XCBWaitForEvent(XCBConnection *c)`

Returns the next event or error from the server, or returns null in the event of an I/O error. Blocks until either an event or error arrive, or an I/O error occurs.

<a name="XCBPollForEvent"></a>

## XCBPollForEvent

(xcb\_in.c)

`XCBGenericEvent *XCBPollForEvent(XCBConnection *c, int *error)`

Returns the next event or error from the server, if one is available, or returns null otherwise. If no event is available, that might be because an I/O error like connection close occurred while attempting to read the next event.

<dl>
  <dt>error</dt>
  <dd>pointer to an int to be filled in with the I/O error status of the operation. If *error* is null, terminates the application when an I/O error occurs.</dd>
</dl>

<a name="XCBFlush"></a>

## XCBFlush

(xcb\_out.c)

`int XCBFlush(XCBConnection *c)`

Forces any buffered output to be written to the server. Blocks until the write is complete.

Returns: 1 on success, 0 on failure

<a name="XCBGetExtensionData"></a>

## XCBGetExtensionData

(xcb\_ext.c)

`const XCBQueryExtensionRep *XCBGetExtensionData(XCBConnection *c, XCBExtension *ext)`

This function is the primary interface to the "extension cache", which caches reply information from [[QueryExtension]] requests. Invoking this function may cause a call to XCBQueryExtension to retrieve extension information from the server, and may block until extension data is received from the server.

Do **not** free the returned XCBQueryExtensionRep - this storage is managed by the cache itself.

<a name="XCBPrefetchExtensionData"></a>

## XCBPrefetchExtensionData

(xcb\_ext.c)

`void XCBPrefetchExtensionData(XCBConnection *c, XCBExtension *ext)`

This function allows a "prefetch" of extension data into the extension cache. Invoking the function may cause a call to XCBQueryExtension, but will not block waiting for the reply. [XCBGetExtensionData](#XCBGetExtensionData) will return the prefetched data after possibly blocking while it is retrieved.
